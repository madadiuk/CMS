<?php
/**
 * Router.php
 *
 * @author M Madadi
 * @copyright De Montfort University
 *
 * @package CryptoShow system CMS
 */

/**
 * Handles routing requests to appropriate controllers based on the requested route.
 */
class Router
{
    private $html_output;
    /**
     * Constructs the Router object.
     */
    public function __construct()
    {
        $this->html_output = '';
    }
    /**
     * Destructs the Router object.
     */
    public function __destruct(){}

    /**
     * Handles routing logic based on the requested route.
     */
    public function routing()
    {
        $html_output = '';
        $selected_route = $this->setRouteName();
        $route_exists = $this->validateRouteName($selected_route);

        if ($route_exists) {
            $html_output = $this->selectController($selected_route);
        }

        $this->html_output = $this->processOutput($html_output);
    }

    /**
     * Set the default route to be index
     *
     * Read the name of the selected route from the magic global POST array and overwrite the default if necessary
     *
     * @return mixed|string
     */
    private function setRouteName()
    {
        $uri = $_SERVER['REQUEST_URI'];
        $route_parts = explode('/', trim($uri, '/'));
        $selected_route = $route_parts[0] ?: 'index'; // Default to 'index' if empty

        return $selected_route;
    }

    /**
     * Validates the requested route name to prevent malicious behavior.
     * @param string $selected_route The name of the selected route.
     * @return bool True if the route exists and is valid, false otherwise.
     */
    private function validateRouteName($selected_route)
    {
        $route_exists = false;
        $validate = Factory::buildObject('Validate');
        $route_exists = $validate->validateRoute($selected_route);
        return $route_exists;
    }
    /**
     * Selects the appropriate controller based on the requested route.
     * @param string $selected_route The name of the selected route.
     * @return string The HTML output generated by the selected controller.
     */
    public function selectController($selected_route)
    {
        $databaseWrapper = Factory::createDatabaseWrapper();
//        echo "Routing to: $selected_route"; // Debug output

        switch ($selected_route) {
            case 'events':
                $eventModel = new EventModel($databaseWrapper);
                $view = new EventView(); // Assuming you have this view ready
                $controller = new EventController($eventModel, $view);
                $controller->listAllEvents();
                break;
            case 'userEvents':
                $userModel = new UserModel($databaseWrapper);
                $eventModel = new EventModel($databaseWrapper);
                $view = new UserEventsView();  // Ensure this view is instantiated correctly
                $controller = new EventController($eventModel, $view);
                $userId = $_SESSION['user_id'];
                $controller->showUserEvents($userId);
                break;
            case 'deleteEvent':
                $eventId = $_GET['id'] ?? null; // Ensure eventId is extracted correctly
                if ($eventId) {
                    $eventModel = new EventModel($databaseWrapper);
                    $controller = new EventController($eventModel, null); // No view needed for deletion
                    $controller->deleteEvent($eventId);
                }
                break;
            case 'addUserEvent':
                if ($_SERVER['REQUEST_METHOD'] === 'GET') { // Check if the request is GET
                    $eventModel = new EventModel($databaseWrapper);
                    $controller = new EventController($eventModel, null); // No need for a view here as it's handled inside the controller
                    $controller->showAddEventForm(); // Display form for adding a new event
                }
                break;
            case 'processAddUserEvent':
                $eventModel = new EventModel($databaseWrapper);
                $controller = new EventController($eventModel, null);
                if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                    $controller->processAddUserEvent($_POST, $_SESSION['user_id']);
                } else {
                    // Redirect or handle incorrectly accessed route.
                    header('Location: /addUserEvent');
                    exit;
                }
                break;
            case 'editEvent':
                $eventId = $_GET['id'] ?? null;  // Get the event ID from query parameter
                if ($eventId) {
                    $eventModel = new EventModel($databaseWrapper);
                    $controller = new EventController($eventModel, null);  // Assume there's no need for a view in parameter here
                    $controller->editEventForm($eventId);  // We'll create this method
                } else {
                    header("Location: /userEvents");  // Redirect if the eventId is not provided
                    exit;
                }
                break;
            case 'processUpdateEvent':
                if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                    $eventModel = new EventModel($databaseWrapper);
                    $eventId = $_POST['event_id'];
                    $userId = $_SESSION['user_id']; // Make sure session user_id is set after login
                    $controller = new EventController($eventModel, null);
                    $controller->updateEventForm($eventId, $_POST, $userId);
                } else {
                    // Redirect or handle incorrectly accessed route
                    header('Location: /userEvents');
                    exit;
                }
                break;
            case 'devices':
                $deviceModel = new DeviceModel($databaseWrapper);
                $view = new DeviceView(); // Assuming you have this view ready
                $controller = new DeviceController($deviceModel, $view);
                $controller->listAllDevices();
                break;
            case 'listDevices':
                $deviceModel = new DeviceModel($databaseWrapper);
                $view = new UserDevicesView();
                $controller = new DeviceController($deviceModel, $view);
                $controller->listUserDevices($_SESSION['user_id']); // Ensure user_id is properly managed
                break;
            case 'addDevice':
                $deviceModel = new DeviceModel($databaseWrapper);
                $controller = new DeviceController($deviceModel, new AddDeviceView());
                $controller->showAddDeviceForm();
                break;
            case 'processAddDevice':
                $deviceModel = new DeviceModel($databaseWrapper);
                $controller = new DeviceController($deviceModel, null); // No view needed for the process
                $controller->processAddDevice();
                break;
            case 'editDevice':
                if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['id'])) {
                    $deviceModel = new DeviceModel($databaseWrapper);
                    $view = new EditDeviceView(); // Assuming you have this view ready
                    $controller = new DeviceController($deviceModel, $view);
                    $deviceId = $_GET['id'];
                    $controller->showEditDeviceForm($deviceId);
                } else {
                    // Redirect or handle incorrectly accessed route.
                    header('Location: /listDevices');
                    exit;
                }
                break;
            case 'processEditDevice':
                if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                    $deviceId = $_POST['deviceId'];  // Assuming your form submits the device ID as 'deviceId'
                    $controller = new DeviceController(new DeviceModel($databaseWrapper), new EditDeviceView());
                    $controller->processEditDevice($deviceId, $_POST);
                } else {
                    header('Location: /editDevice');  // Redirect if not accessed via POST
                    exit;
                }
                break;
            case 'deleteDevice':
                if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['deviceId'])) {
                    $deviceModel = new DeviceModel($databaseWrapper);
                    $controller = new DeviceController($deviceModel, null);
                    $controller->deleteDevice($_POST['deviceId']);
                } else {
                    header('Location: /listDevices');
                    exit;
                }
                break;

            case 'logout':
                session_destroy();
                header('Location: /login');
                exit;
                break;
            case 'login':
                $userModel = new UserModel($databaseWrapper);
                $view = new LoginView(); // Assuming you have this view ready
                $controller = new UserController($userModel, $view);
                $controller->showLoginForm();
                break;
            case 'register':
                $userModel = new UserModel($databaseWrapper);
                $view = new RegisterView(); // Make sure RegisterView is properly loaded
                $controller = new UserController($userModel, $view);
                $controller->showRegistrationForm(); // This should now work without error
                break;
            case 'process_login':
                $userModel = new UserModel($databaseWrapper);
                $controller = new UserController($userModel, null);
                // Assuming $_POST contains your login form data
                $controller->loginUser($_POST);
                break;
            case 'profile':
                $userModel = new UserModel($databaseWrapper);
//                var_dump($_SESSION); exit;
                $view = new ProfileView(); // Assuming you have this view ready
                $controller = new UserController($userModel, $view);
                $controller->showProfile();
                break;
            case 'process_register':
                $userModel = new UserModel($databaseWrapper);
                $controller = new UserController($userModel, null);
                // Assuming $_POST contains your registration form data
                $controller->registerUser($_POST);
                break;
            case 'add_device':
                $deviceModel = new DeviceModel($databaseWrapper);
                $view = new AddDeviceView(); // Assuming you have this view ready
                $controller = new DeviceController($deviceModel, $view);
                $controller->addDevice();
                break;
            case 'process_profile_update':
                $userModel = new UserModel($databaseWrapper);
                $view = new ProfileView(); // Assuming this view can also handle update feedback
                $controller = new UserController($userModel, $view);
                $controller->updateUserProfile($_POST);
                break;
            case 'delete_profile':
                if ($_SERVER['REQUEST_METHOD'] == 'POST') {
                    $userModel = new UserModel($databaseWrapper);
                    $controller = new UserController($userModel, null);
                    $controller->deleteUserProfile();
                }
                break;
            case 'index':

            default:
                 $controller = $this->indexController($databaseWrapper);
                break;
        }
        if (!isset($controller)) {
            $controller = $this->indexController($databaseWrapper);

        }
        $controller->createHtmlOutput();

        return $controller->getHtmlOutput();
    }

    /**
     * @param $databaseWrapper
     * @return IndexController - The IndexController object with all required dependencies
     * @throws Exception
     * @internal param $eventModel
     */
    private function indexController($databaseWrapper)
    {
        $eventModel = new EventModel($databaseWrapper);
        $userModel = new UserModel($databaseWrapper); // Assuming you have a UserModel class and it's constructed similarly
        $deviceModel = new DeviceModel($databaseWrapper); // Assuming you have a DeviceModel class and it's constructed similarly

        // Manually instantiate the IndexController with both EventModel and UserModel dependencies
         return new IndexController($eventModel, $userModel, $deviceModel); // Now passing both required arguments
    }
    /**
     * Generates and sets the HTML output for the view based on the controller's actions.
     * @param string $html_output The HTML output generated by the controller.
     * @return string The processed HTML output.
     */
    private function processOutput(string $html_output)
    {
        $processed_html_output = '';
        $process_output = Factory::buildObject('ProcessOutput');
        $processed_html_output = $process_output->assembleOutput($html_output);
        return $processed_html_output;
    }

    public function getHtmlOutput()
    {
        return $this->html_output;
    }
}
