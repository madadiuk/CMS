<?php
/**
 * UserEventsView.php
 *
 *  User events view
 *  This class is responsible for generating the HTML content for the user events page
 *
 *
 * @author M Madadi
 * @copyright De Montfort University
 *
 * @package CryptoShow system CMS
 */
if (!isset($_SESSION['user_id'])) {
    // User is not logged in.
    // Redirect them to the login page.
    header('Location: /login');
    exit;
}
/**
 * Represents the view for user events.
 */
class UserEventsView extends UserTemplateView
{
    /**
     * Constructs a new UserEventsView object.
     */
    public function __construct()
    {
        parent::__construct();
    }
    /** @var array Stores the user's event data. */
    private $userEvent= []; // Declare the property
    /**
     * Sets the user's event data.
     *
     * @param array $userEvent User's event data.
     */
    public function setUserEvent($userEvent) {
        $this->userEvent = $userEvent;
    }
    /**
     * Orchestrates the creation of the user event page.
     */
    public function createUserEventPage()
    {
        $this->setPageTitle();
        $this->createWebPage();
        $this->createPageContent();
        $this->createFooter();
    }
    /**
     * Retrieves the HTML output generated by the view.
     *
     * @return string HTML output generated by the view.
     */
    public function getHtmlOutput(): string
    {
        return $this->html_page_output;
    }
    /**
     * Sets the page title.
     */
    private function setPageTitle()
    {
        $this->page_title = 'CryptoShow System | my Events';
    }
    /**
     * Creates the page content.
     */
    protected function createPageContent() {
        $message = '';
        if (isset($_SESSION['profile_message'])) {
            $message .= "<div class='notification success'>" . $_SESSION['profile_message'] . "</div>";
            unset($_SESSION['profile_message']); // Clear the message after displaying
        }

        if (isset($_SESSION['profile_errors'])) {
            foreach ($_SESSION['profile_errors'] as $error) {
                $message .= "<div class='notification error'>" . $error . "</div>";
            }
            unset($_SESSION['profile_errors']); // Clear the errors after displaying
        }

        $this->html_page_content = <<<HTMLCONTENT
<style>
.notification {
    padding: 10px 20px;
    border-radius: 5px;
    color: #fff;
    margin: 10px 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: inline-block;
    font-family: Arial, sans-serif;
}

.success {
    background-color: #4CAF50; /* Green background for success messages */
}

.error {
    background-color: #f44336; /* Red background for error messages */
}

.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

       .events-table {
    width: 100%;
    border-collapse: collapse;
}

.events-table th,
.events-table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.events-table th {
    background-color: #f4f4f4;
}

.edit-button,
.delete-button {
    padding: 5px 10px;
    margin-right: 5px;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    color: white;
}

.edit-button {
    background-color: #4CAF50; /* Green */
}

.delete-button {
    background-color: #f44336; /* Red */
}

.info {
    padding: 10px;
    background-color: #ffffcc;
    color: #333;
    text-align: center;
    margin-top: 20px;
    border: 1px solid #ffd700;
}
.add-event-button {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
    display: inline-block;
    margin-bottom: 20px; /* Space between button and table */
    margin-top: 20px;
}

.add-event-button:hover {
    background-color: #0056b3;
}
@media (max-width: 600px) {
    .events-table {
        display: block;
        overflow-x: auto;
    }
}

    </style>
         <a href="/addUserEvent" class="add-event-button">Add New Event</a>

         $message
HTMLCONTENT;

        $userEventSection = $this->generateUserEventSection();

        $this->html_page_content .= $userEventSection; // Append the dynamic events section

        $moreStaticContent = <<<HTMLCONTENT
          
        </div>
      

HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;
        $moreStaticContent = <<<HTMLCONTENT

HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;

        $moreStaticContent = <<<HTMLCONTENT
        <div class="home-section-separator"></div>
HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;
        $this->html_page_output .= $this->html_page_content;

    }

    /**
     * Generates the HTML code for the user event section.
     *
     * @return string HTML code for the user event section.
     */
    private function generateUserEventSection(): string
    {
//        echo '<pre>' . print_r($_SESSION, true) . '</pre>'; // Debugging
        if (empty($this->userEvent)) {
            return "<div class='info'>You do not have any events.</div>";
        }

        $eventHtml = "<table class='events-table'>";
        $eventHtml .= "<thead><tr><th>Event Name</th><th>Date</th><th>Venue</th><th>Actions</th></tr></thead><tbody>";

        foreach ($this->userEvent as $event) {
            $csrfToken = $_SESSION['csrf_token'];  // Ensure CSRF token is retrieved safely
            $eventHtml .= "<tr>";
            $eventHtml .= "<td>" . htmlspecialchars($event['event_name']) . "</td>";
            $eventHtml .= "<td>" . htmlspecialchars($event['event_date']) . "</td>";
            $eventHtml .= "<td>" . htmlspecialchars($event['event_venue']) . "</td>";
            $eventHtml .= "<td>";
            $eventHtml .= "<a href='/editEvent/?id=" . $event['event_id'] . "' class='edit-button'>Edit</a>";
            // Form for deleting an event
            $eventHtml .= "<form method='post' action='/deleteEvent/?id=" . $event['event_id'] . "' onsubmit='return confirm(\"Are you sure?\");' style='display:inline;'>";
            $eventHtml .= "<input type='hidden' name='csrf_token' value='" . $_SESSION['csrf_token'] . "'>";
            $eventHtml .= "<button type='submit' class='delete-button'>Delete</button>";
            $eventHtml .= "</form>";
            $eventHtml .= "</td>";
            $eventHtml .= "</tr>";

        }
        $eventHtml .= "</tbody></table>";
        return $eventHtml;
    }
    /**
     * Generates a CSRF token for the form.
     *
     * @return string CSRF token.
     */
    private function generateCsrfToken(): string
    {
        if (!isset($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
        return $_SESSION['csrf_token'];
    }
}

