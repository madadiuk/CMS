<?php
/**
 * UserEventsView.php
 *
 *  User events view
 *  This class is responsible for generating the HTML content for the user events page
 *
 *
 * @author M Madadi
 * @copyright De Montfort University
 *
 * @package CryptoShow system CMS
 */
if (!isset($_SESSION['user_id'])) {
    // User is not logged in.
    // Redirect them to the login page.
    header('Location: /login');
    exit;
}
/**
 * Represents the view for displaying user devices.
 */
class UserDevicesView extends UserTemplateView
{
    /**
     * Constructs a new UserDevicesView object.
     */
    public function __construct()
    {
        parent::__construct();
    }
    /** @var array Stores the user's device data. */
    private $userDevice= []; // Declare the property
    /**
     * Sets the user's device data.
     *
     * @param array $userDevice User's device data.
     */
    public function setUserDevice($userDevice) {
        $this->userDevice = $userDevice;
    }
    /**
     * Orchestrates the creation of the user device page.
     */
    public function createUserDevicePage()
    {
        $this->setPageTitle();
        $this->createWebPage();
        $this->createPageContent();
        $this->createFooter();
    }
    /**
     * Retrieves the HTML output generated by the view.
     *
     * @return string HTML output generated by the view.
     */
    public function getHtmlOutput(): string
    {
        return $this->html_page_output;
    }
    /**
     * Sets the page title.
     */
    private function setPageTitle()
    {
        $this->page_title = 'CryptoShow System | my Devices';
    }
    /**
     * Creates the page content.
     */
    protected function createPageContent() {
        $message = '';
        if (isset($_SESSION['profile_message'])) {
            $message .= "<div class='notification success'>" . $_SESSION['profile_message'] . "</div>";
            unset($_SESSION['profile_message']); // Clear the message after displaying
        }

        if (isset($_SESSION['profile_errors'])) {
            foreach ($_SESSION['profile_errors'] as $error) {
                $message .= "<div class='notification error'>" . $error . "</div>";
            }
            unset($_SESSION['profile_errors']); // Clear the errors after displaying
        }
        // Check for a success message in the session
        $message = '';
        if (isset($_SESSION['success_message'])) {
            $message = "<div style='background-color: #4CAF50; color: white; padding: 10px; margin-bottom: 20px;'>" . $_SESSION['success_message'] . "</div>";
            unset($_SESSION['success_message']); // Clear the message after displaying
        }

        $this->html_page_content = <<<HTMLCONTENT
<style>
.notification {
    padding: 10px 20px;
    border-radius: 5px;
    color: #fff;
    margin: 10px 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: inline-block;
    font-family: Arial, sans-serif;
}

.success {
    background-color: #4CAF50; /* Green background for success messages */
}

.error {
    background-color: #f44336; /* Red background for error messages */
}

.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

       .events-table {
    width: 100%;
    border-collapse: collapse;
}

.events-table th,
.events-table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.events-table th {
    background-color: #f4f4f4;
}

.edit-button,
.delete-button {
    padding: 5px 10px;
    margin-right: 5px;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    color: white;
}

.edit-button {
    background-color: #4CAF50; /* Green */
}

.delete-button {
    background-color: #f44336; /* Red */
}

.info {
    padding: 10px;
    background-color: #ffffcc;
    color: #333;
    text-align: center;
    margin-top: 20px;
    border: 1px solid #ffd700;
}
.add-event-button {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
    display: inline-block;
    margin-bottom: 20px; /* Space between button and table */
    margin-top: 20px;
}

.add-event-button:hover {
    background-color: #0056b3;
}
@media (max-width: 600px) {
    .events-table {
        display: block;
        overflow-x: auto;
    }
}

    </style>
         <a href="/addDevice" class="add-event-button">Add New Device</a>

         $message
HTMLCONTENT;

        $userDeviceSection = $this->generateUserDeviceSection();

        $this->html_page_content .= $userDeviceSection; // Append the dynamic Devices section

        $moreStaticContent = <<<HTMLCONTENT
          
        </div>
      

HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;
        $moreStaticContent = <<<HTMLCONTENT

HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;

        $moreStaticContent = <<<HTMLCONTENT
        <div class="home-section-separator"></div>
HTMLCONTENT;
        $this->html_page_content  .= $moreStaticContent;
        $this->html_page_output .= $this->html_page_content;

    }

    /**
     * Generates the HTML code for the user device section.
     *
     * @return string HTML code for the user device section.
     */
    private function generateUserDeviceSection(): string
    {
        // Start with an informative message if there are no devices
        if (empty($this->userDevice)) {
            return "<div class='info'>You do not have any devices registered.</div>";
        }

        // Start building the HTML for the table
        $deviceHtml = "<table class='events-table'>";
        $deviceHtml .= "<thead><tr><th>Device Name</th><th>Registered Date</th><th>Visibility</th><th>Actions</th></tr></thead><tbody>";

        // Loop through each device and create a table row
        foreach ($this->userDevice as $device) {
            $visibleStatus = $device['crypto_device_record_visible'] ? "Visible" : "Hidden"; // Check visibility status
            $deviceHtml .= "<tr>";
            $deviceHtml .= "<td>" . htmlspecialchars($device['crypto_device_name']) . "</td>";
            $deviceHtml .= "<td>" . htmlspecialchars($device['crypto_device_registered_timestamp']) . "</td>";
            $deviceHtml .= "<td>" . $visibleStatus . "</td>";  // Display visibility status
            $deviceHtml .= "<td>";
            $deviceHtml .= "<a href='/editDevice/?id=" . $device['crypto_device_id'] . "' class='edit-button'>Edit</a>";
            // Add a form for deleting a device
            $deviceHtml .= "<form method='post' action='/deleteDevice' onsubmit='return confirm(\"Are you sure you want to delete this device?\");' style='display:inline;'>";
            $deviceHtml .= "<input type='hidden' name='csrf_token' value='" . $_SESSION['csrf_token'] . "'>";
            $deviceHtml .= "<input type='hidden' name='deviceId' value='" . $device['crypto_device_id'] . "'>";
            $deviceHtml .= "<button type='submit' class='delete-button'>Delete</button>";
            $deviceHtml .= "</form>";
            $deviceHtml .= "</td>";
            $deviceHtml .= "</tr>";
        }
        $deviceHtml .= "</tbody></table>";

        return $deviceHtml;
    }

    /**
     * Generates a CSRF token for the form.
     *
     * @return string CSRF token.
     */
    private function generateCsrfToken(): string
    {
        if (!isset($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
        return $_SESSION['csrf_token'];
    }


}

